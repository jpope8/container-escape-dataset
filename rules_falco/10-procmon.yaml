# In auditd, we can simply do a thing called never. But here in falco, my thought is we need to add exceptions
# to every single rule, don't know if there is another way of doing this

- macro: container
  condition: container.id != host

- macro: exclusion
  condition: not proc.name = systemlogger.py and not proc.name = experiment.py and not proc.name = falco and not proc.name = code

- rule: log_all_execve
  desc: log anything that is triggered by the execve system call
  condition: evt.type = execve and evt.dir = < and exclusion
  output: execve system call (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# a list of paths that might be violated by privilege escaltion attack
- list: privileged_path
  items: [/bin/su, /bin/ntfs-3g, /bin/fusermount, /bin/umount, /bin/mount, /sbin/mount.nfs, /sbin/mount.cifs, /usr/bin/chsh, /usr/bin/gpasswd,
   /usr/bin/pkexec, /usr/bin/passwd, /usr/bin/vmware-user-suid-wrapper, /usr/bin/bwrap, /usr/bin/newgrp, /usr/bin/chfn, /usr/bin/sudo, /usr/sbin/exim4]

# not even sure if I did it right
- rule: log_exec_su
  desc: log /bin/su executable access
  condition: evt.type = execve and evt.dir = < and fd.name in (privileged_path) and exclusion
  output: a dangerous access (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# docker rules
# can't do this atm, syscalls would burst out leave no space for others
- rule: socket-file
  desc: log all senmsg and recvmsg syscall
  condition: (evt.type = sendmsg or evt.type = recvmsg) and evt.dir = < and exclusion
  output: socket-file (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name lip=%fd.lip rip=%fd.rip lport=%fd.lport rport=%fd.rport container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# - list: docker-path
#   items: [usr/bin/docker, usr/bin/dockerd, usr/bin/docker-proxy]

# # not so sure of -w -a and without setting permissions, he said I don't need this
# # monitor docker executables
# - rule: log_docker_exe
#   desc: log docker related exe
#   condition: fd.name in (docker-path)
#   output: not sure tbh (user=%user.name container_id=%container.id image_name=%container.image shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
#   priority: WARNING

# we are ignoring the auditd rules that are file centric, not so sure how to do that 
- rule: log-mkdir
  desc: log all mkdir and mkdirat system calls
  condition: (evt.type = mkdir or evt.type = mkdirat) and evt.dir = < and exclusion
  output: making directory (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# auditd rules 41
- rule: log-container-config
  desc: watch for containers that may change their configuration
  condition: (evt.type = unshare or evt.type = setns) and evt.dir = < and exclusion
  output: config changes (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# the rest are all files based

# auditd rules 43
- rule: log-module-load
  desc: watch for kernel module insertion
  condition: (evt.type = init_module or evt.type = finit_module) and evt.dir = < and exclusion
  output: module load (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

- rule: log-module-unload
  desc: watch for kernel module insertion
  condition: evt.type = delete_module and evt.dir = < and exclusion
  output: module unload (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# auditd rules 71

- list: network-syscalls
  items: [socket,connect,shutdown,bind,listen,socketpair,setsockopt,sendto,recvfrom]

- rule: network-access
  desc: This is to check if the system is making or recieving connections externally
  condition: evt.type in (network-syscalls) and evt.dir = < and exclusion
  output: network access (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name lip=%fd.lip rip=%fd.rip lport=%fd.lport rport=%fd.rport container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

# user, ppid, pid, permission level (access level), files, sockets(ip source, dest, address, and port), uid, memory(maybe), exe (executable path, refer auditd if needed)

# stig rules 30

- list: time-related-syscalls
  items: [adjtimex,settimeofday,stime,clock_settime]

- rule: time-change
  desc: things that could affect time
  condition: evt.type in (time-related-syscalls) and evt.dir = < and exclusion
  output: time changes (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

- rule: system-locale
  desc: Things that could affect system locale
  condition: (evt.type = sethostname or evt.type = setdomainname) and evt.dir = < and exclusion
  output: system locale (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

- list: perm-mod-syscalls
  items: [chmod,fchmod,fchmodat,lchown,fchown,chown,fchownat,setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr]

- rule: perm-mod
  desc: Discretionary access control permission modification (unsuccessful and successful use of chown/chmod)
  condition: evt.type in (perm-mod-syscalls) and evt.dir = < and exclusion
  output: perm mod (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING


- list: access-syscalls
  items: [open,creat,truncate,ftruncate,openat,open_by_handle_at]

# this one is not the same as the origianl, origianl also specifies the exit types
# not sure how to do those tho
- rule: access
  desc: Unauthorized access attempts to files
  condition: (evt.type in (access-syscalls) and (evt.res = EACCES or evt.res = EPERM)) and evt.dir = < and exclusion
  output: access (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

- rule: mount-syscalls
  desc: Export to media (successful) You have to mount media before using it.
  condition: (evt.type = mount or evt.type = umount2) and evt.dir = < and exclusion
  output: export (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING

- list: delete-syscalls
  items: [unlink,unlinkat,rename,renameat]

- rule: delete
  desc: Files and programs deleted by the user
  condition: evt.type in (delete-syscalls) and evt.dir = < and exclusion
  output: delete (event_id=%evt.num uid=%user.uid pid=%proc.pid ppid=%proc.ppid files=%fd.name container_id=%container.id image_name=%container.image exe=%proc.exe shell=%proc.name cmdline=%proc.cmdline syscall=%syscall.type)
  priority: WARNING
 